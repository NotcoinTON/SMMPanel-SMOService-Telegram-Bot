# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞
import os
from aiogram.filters import StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.types import Message, CallbackQuery
from aiogram import F
from core.keyboards import Button
from core.config import config
import database as db
from urllib.parse import urlencode
import uuid
import requests
import json
import time
import hmac
import hashlib
from aiogram import Bot, Router

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
Sum = 0.0
order_id = ''
user_id = 0

BalanceRouter = Router()

# –°–æ–∑–¥–∞–µ–º FSM
class FSMFillFrom(StatesGroup):
    ReplenishBalance = State()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã
@BalanceRouter.message(Command('mybalance'))
async def MyBalanceKeyboard(message: Message, state: FSMContext):
    # –í—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await MyBalance(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–æ–π –ë–∞–ª–∞–Ω—Å
@BalanceRouter.message(F.text == 'üè¶–ú–æ–π –±–∞–ª–∞–Ω—Å')
async def MyBalance(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ –±–¥ —Å –ø–æ–º–æ—â—å—é id
    balance = await db.GetBalance(message.from_user.id)
    text = f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance[0]} —Ä—É–±.\n' \
           'üí≥ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, —É–∫–∞–∑–∞–≤ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:'
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSM
    await message.answer(text)
    await state.set_state(FSMFillFrom.ReplenishBalance)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ FSM –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
@BalanceRouter.message(StateFilter(FSMFillFrom.ReplenishBalance))
async def ReplenishBalance(message: Message, state: FSMContext):
    global Sum
    if message.text.isdigit() is True:
        Sum = float(message.text)
        Shopped = str(os.getenv('SHOPID'))
        SecretKey = str(os.getenv('SECRETKEY'))
        global order_id, user_id
        order_id = uuid.uuid4()
        user_id = message.from_user.id
        print(order_id)
        data = {
            'shop_id': Shopped,
            'amount': Sum,
            'currency': 'RUB',
            'order_id': order_id,
            'test': 1
        }
        sorted_data = sorted(data.items())
        data_string = urlencode(sorted_data)
        sign = hashlib.md5((data_string + SecretKey).encode()).hexdigest()
        PayUrl = f'https://tegro.money/pay/?{data_string}&sign={sign}'
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=await Button.TegroPay(PayUrl))
        await message.answer('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', reply_markup=Button.CheckPay)
        await message.answer('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é‚§µÔ∏è ', reply_markup=Button.BackMainKeyboard)
    else:
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
@BalanceRouter.callback_query(F.data == 'check_pay')
async def CheckPay(callback: CallbackQuery, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ Tegro –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞
    api_key = 'D3xYTmMfdDGlPA3I'
    data = {
        'shop_id': str('3FF517A8EF30E24571BDAD4181F24FD0'),
        'nonce': int(time.time()),
        'payment_id': str(order_id)
    }
    body = json.dumps(data)
    sign = hmac.new(api_key.encode(), body.encode(), hashlib.sha256).hexdigest()

    headers = {
        'Authorization': f'Bearer {sign}',
        'Content-Type': 'application/json',
    }

    url = "https://tegro.money/api/order/"
    response = requests.post(url, data=body, headers=headers)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Tegro
    textdata = json.loads(response.text)
    status = textdata['data']
    # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ 0, —Ç–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
    if not status:
        await callback.message.answer('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    else:
        status = status['status']
        if status == 1:
            await db.UpdateBalance(user_id, Sum)
            await callback.message.answer('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞')
            await callback.message.delete()
        else:
            await callback.message.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')