from aiogram.types import Message, CallbackQuery
from aiogram import F
from core.keyboards import Button
from core.config import config
from aiogram.filters import StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import database as db
import requests
import json
from aiogram import Bot, Router

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
MinOrdersList = 0
MaxOrdersList = 12

AdminAllOrders = Router()

class FSMFillFrom(StatesGroup):
    check_id = State()

@AdminAllOrders.message(F.text == '–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å—ã')
async def MyOrderAdmin(message: Message, bot: Bot, SearchId=None, SearchLink=None, SearchName=None):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    if SearchId is None and SearchName is None and SearchLink is None:
        OrderList = await db.GetOrders()
    elif SearchLink is not None:
        OrderList = SearchLink
    elif SearchId is not None:
        OrderList = SearchId
    elif SearchName is not None:
        OrderList = SearchName
    print(len(OrderList))
    text = ''
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ø–∏—Å–æ–∫ –±–æ–ª—å—à–µ 0
    if len(OrderList) > 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –Ω–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(OrderList) < 13:
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            for order in OrderList:
                NameProduct = await db.GetProductName(order[2])
                url = 'https://smmpanel.ru/api/v1'
                data = {
                    'key': '6qkjaI5Wb8OsDzrQDagYNPtpbJNdtpGe',
                    'action': 'status',
                    'order': order[8]
                }
                response = requests.post(url, data=data)
                OrderData = json.loads(response.text)
                Status = (OrderData['status'])
                Order_id = (OrderData['order'])
                await db.UpdateOrderStatus(Order_id, Status)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                if Status == 'Pending':
                    text += f'üÜï–í –æ–∂–∏–¥–∞–Ω–∏–∏ {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'In progress':
                    text += f'üîÑ–í —Ä–∞–±–æ—Ç–µ {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'Processing':
                    text += f'‚ûï–û–±—Ä–∞–±–æ—Ç–∫–∞ {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'Completed':
                    text += f'‚òëÔ∏è–í—ã–ø–æ–ª–Ω–µ–Ω {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'success':
                    text += f'üÜï–ù–æ–≤—ã–π {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'Partial':
                    text += f'‚òëÔ∏è–í—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
                elif Status == 'Canceled':
                    text += f'‚ùå–û—Ç–º–µ–Ω–µ–Ω {NameProduct} {order[4]}—à—Ç {order[5]}RUB\n'
            await message.answer(text, reply_markup=Button.SearchOrdersAdminKeyboard)
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –Ω–µ –ø–æ–º–µ—Å—Ç—è—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        else:
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for a in range(MinOrdersList, MaxOrdersList):
                if a < len(OrderList):
                    NameProduct = 'sdasdasd' #await db.GetProductName(OrderList[a][2])
                    url = 'https://smmpanel.ru/api/v1'
                    data = {
                        'key': '6qkjaI5Wb8OsDzrQDagYNPtpbJNdtpGe',
                        'action': 'status',
                        'order': OrderList[a][8]
                    }
                    response = requests.post(url, data=data)
                    OrderData = json.loads(response.text)
                    Status = (OrderData['status'])
                    Order_id = (OrderData['order'])
                    await db.UpdateOrderStatus(Order_id, Status)
                    if Status == 'Pending':
                        text += f'üÜï–í –æ–∂–∏–¥–∞–Ω–∏–∏ {NameProduct} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'In progress':
                        text += f'üîÑ–í —Ä–∞–±–æ—Ç–µ {NameProduct} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'Processing':
                        text += f'‚ûï–û–±—Ä–∞–±–æ—Ç–∫–∞ {NameProduct} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'Completed':
                        text += f'‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω {NameProduct} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'success':
                        text += f'üÜï–ù–æ–≤—ã–π {NameProduct} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'Partial':
                        text += f'‚òëÔ∏è–í—ã–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ {NameProduct} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
                    elif Status == 'Canceled':
                        text += f'‚ùå–û—Ç–º–µ–Ω–µ–Ω {NameProduct} {OrderList[a][4]}—à—Ç {OrderList[a][5]}RUB\n'
            # –î–µ–ª–∞–µ–º –∑–∞—â–∏—Ç—É –≤ –º–µ–Ω—å—à—É—é –∏ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            if MinOrdersList >= 0:
                if MaxOrdersList == 12:
                    await bot.send_message(message.from_user.id, text, reply_markup=Button.OnlyNextOrdersListAdmin)
                elif len(OrderList) >= MaxOrdersList > 13:
                    await bot.send_message(message.from_user.id, text, reply_markup=Button.NextOrdersListAdmin)
                else:
                    await bot.send_message(message.from_user.id, text, reply_markup=Button.BackOrdersListAdmin)
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∏–º —á—Ç–æ –Ω–µ –∑–∞–∫–∞–∑–æ–≤
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤')


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥ —Å–ª–∞–π–¥
@AdminAllOrders.callback_query(F.data == 'NextOrdersListAdmin')
async def NoSubCategory(callback: CallbackQuery, bot: Bot):
    global MinOrdersList, MaxOrdersList
    MinOrdersList += 12
    MaxOrdersList += 12
    await callback.message.delete()
    await MyOrderAdmin(callback, bot)


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–æ—à–ª—ã–π —Å–ª–∞–π–¥
@AdminAllOrders.callback_query(F.data == 'BackOrderListAdmin')
async def NoSubCategory(callback: CallbackQuery, bot: Bot):
    global MinOrdersList, MaxOrdersList
    if MinOrdersList > 0 and MaxOrdersList > 0:
        MinOrdersList -= 12
        MaxOrdersList -= 12
    await callback.message.delete()
    await MyOrderAdmin(callback, bot)


@AdminAllOrders.callback_query(F.data == 'SearchForId')
async def SearchForId(call: CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await state.set_state(FSMFillFrom.check_id)


@AdminAllOrders.message(StateFilter(FSMFillFrom.check_id))
async def StateAddSubCategory(message: Message, state: FSMContext, bot: Bot):
    await message.delete()
    id = message.text
    await MyOrderAdmin(message, bot, await db.GetOrders(id))
    await state.clear()

